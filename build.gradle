/*
 * Copyright (C) 2001-2002  Zaval Creative Engineering Group (http://www.zaval.org)
 * Copyright (C) 2018 Christoph Obexer <cobexer@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * (version 2) as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

plugins {
	id 'application'
	id 'eclipse'
	id "com.diffplug.spotless" version "5.14.1"
	id "ca.coglinc2.javacc" version "3.0.0"
	id "org.sonarqube" version "3.1.1"
	id "com.github.ben-manes.versions" version "0.39.0"
}

application {
	mainClassName = 'org.zaval.tools.i18n.translator.JrcEditor'
	executableDir = ''
}

sourceCompatibility = 11
targetCompatibility = 11

tasks.compileJava.options.encoding = 'UTF-8'
tasks.compileTestJava.options.encoding = 'UTF-8'

spotless {
	java {
		target 'src/**/*.java'
		licenseHeaderFile rootProject.file('resources/license.java')
		eclipse().configFile rootProject.file('resources/eclipse-jdt-formatter.xml')
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

dependencies {
	compile 'org.apache.commons:commons-configuration2:2.8.0'
	compile 'commons-beanutils:commons-beanutils:1.9.4'
	compile 'jakarta-regexp:jakarta-regexp:1.4'
}

repositories {
	jcenter()
}

sourceSets {
	main {
		java {
			srcDir compileJavacc.outputDirectory
		}
	}
}

eclipseClasspath.dependsOn("compileJavacc")

compileJavacc {
	inputDirectory = file('src/main/javacc')
	outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc')
}

tasks.withType(Tar) {
	compression = Compression.GZIP
}

assemble {
	dependsOn ':spotlessCheck'
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}

tasks.sonarqube {
	onlyIf {
		(System.properties.'sonar.organization' && System.env.TRAVIS_PULL_REQUEST == 'false') || System.env.SCRUTINIZER
	}
}

sonarqube {
	properties {
		property "sonar.exclusions", "**/org/zaval/tools/i18n/translator/generated/**"
		property "sonar.branch.name", System.env.TRAVIS_BRANCH
	}
}

dependencyUpdates {
	revision "release"
	outputFormatter "text"
	resolutionStrategy {
		componentSelection { rules ->
			rules.all { ComponentSelection selection ->
				boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
					selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
				}
				if (rejected) {
					selection.reject('Release candidate')
				}
				else {
					rejected = selection.candidate.version.contains('-');
					if (rejected) {
						selection.reject('SNAPSHOT version')
					}
				}
			}
		}
	}
}
